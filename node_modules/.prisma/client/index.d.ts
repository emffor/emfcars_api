
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Transmisson
 * 
 */
export type Transmisson = {
  id: string
  name: string
}

/**
 * Model Brands
 * 
 */
export type Brands = {
  id: string
  name: string
}

/**
 * Model Cars
 * 
 */
export type Cars = {
  id: string
  color: string
  model: string
  creation_year: number
  model_year: number
  transmissonId: string | null
  brandsId: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Transmissons
 * const transmissons = await prisma.transmisson.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Transmissons
   * const transmissons = await prisma.transmisson.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.transmisson`: Exposes CRUD operations for the **Transmisson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transmissons
    * const transmissons = await prisma.transmisson.findMany()
    * ```
    */
  get transmisson(): Prisma.TransmissonDelegate<GlobalReject>;

  /**
   * `prisma.brands`: Exposes CRUD operations for the **Brands** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brands.findMany()
    * ```
    */
  get brands(): Prisma.BrandsDelegate<GlobalReject>;

  /**
   * `prisma.cars`: Exposes CRUD operations for the **Cars** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cars
    * const cars = await prisma.cars.findMany()
    * ```
    */
  get cars(): Prisma.CarsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Transmisson: 'Transmisson',
    Brands: 'Brands',
    Cars: 'Cars'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TransmissonCountOutputType
   */


  export type TransmissonCountOutputType = {
    Cars: number
  }

  export type TransmissonCountOutputTypeSelect = {
    Cars?: boolean
  }

  export type TransmissonCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TransmissonCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TransmissonCountOutputType
    : S extends undefined
    ? never
    : S extends TransmissonCountOutputTypeArgs
    ?'include' extends U
    ? TransmissonCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TransmissonCountOutputType ? TransmissonCountOutputType[P] : never
  } 
    : TransmissonCountOutputType
  : TransmissonCountOutputType




  // Custom InputTypes

  /**
   * TransmissonCountOutputType without action
   */
  export type TransmissonCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TransmissonCountOutputType
     * 
    **/
    select?: TransmissonCountOutputTypeSelect | null
  }



  /**
   * Count Type BrandsCountOutputType
   */


  export type BrandsCountOutputType = {
    Cars: number
  }

  export type BrandsCountOutputTypeSelect = {
    Cars?: boolean
  }

  export type BrandsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BrandsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BrandsCountOutputType
    : S extends undefined
    ? never
    : S extends BrandsCountOutputTypeArgs
    ?'include' extends U
    ? BrandsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BrandsCountOutputType ? BrandsCountOutputType[P] : never
  } 
    : BrandsCountOutputType
  : BrandsCountOutputType




  // Custom InputTypes

  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BrandsCountOutputType
     * 
    **/
    select?: BrandsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Transmisson
   */


  export type AggregateTransmisson = {
    _count: TransmissonCountAggregateOutputType | null
    _min: TransmissonMinAggregateOutputType | null
    _max: TransmissonMaxAggregateOutputType | null
  }

  export type TransmissonMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TransmissonMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type TransmissonCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type TransmissonMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type TransmissonMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type TransmissonCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type TransmissonAggregateArgs = {
    /**
     * Filter which Transmisson to aggregate.
     * 
    **/
    where?: TransmissonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transmissons to fetch.
     * 
    **/
    orderBy?: Enumerable<TransmissonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TransmissonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transmissons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transmissons.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transmissons
    **/
    _count?: true | TransmissonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransmissonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransmissonMaxAggregateInputType
  }

  export type GetTransmissonAggregateType<T extends TransmissonAggregateArgs> = {
        [P in keyof T & keyof AggregateTransmisson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransmisson[P]>
      : GetScalarType<T[P], AggregateTransmisson[P]>
  }




  export type TransmissonGroupByArgs = {
    where?: TransmissonWhereInput
    orderBy?: Enumerable<TransmissonOrderByWithAggregationInput>
    by: Array<TransmissonScalarFieldEnum>
    having?: TransmissonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransmissonCountAggregateInputType | true
    _min?: TransmissonMinAggregateInputType
    _max?: TransmissonMaxAggregateInputType
  }


  export type TransmissonGroupByOutputType = {
    id: string
    name: string
    _count: TransmissonCountAggregateOutputType | null
    _min: TransmissonMinAggregateOutputType | null
    _max: TransmissonMaxAggregateOutputType | null
  }

  type GetTransmissonGroupByPayload<T extends TransmissonGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TransmissonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransmissonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransmissonGroupByOutputType[P]>
            : GetScalarType<T[P], TransmissonGroupByOutputType[P]>
        }
      >
    >


  export type TransmissonSelect = {
    id?: boolean
    name?: boolean
    Cars?: boolean | CarsFindManyArgs
    _count?: boolean | TransmissonCountOutputTypeArgs
  }

  export type TransmissonInclude = {
    Cars?: boolean | CarsFindManyArgs
    _count?: boolean | TransmissonCountOutputTypeArgs
  }

  export type TransmissonGetPayload<
    S extends boolean | null | undefined | TransmissonArgs,
    U = keyof S
      > = S extends true
        ? Transmisson
    : S extends undefined
    ? never
    : S extends TransmissonArgs | TransmissonFindManyArgs
    ?'include' extends U
    ? Transmisson  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Cars' ? Array < CarsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? TransmissonCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Cars' ? Array < CarsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? TransmissonCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Transmisson ? Transmisson[P] : never
  } 
    : Transmisson
  : Transmisson


  type TransmissonCountArgs = Merge<
    Omit<TransmissonFindManyArgs, 'select' | 'include'> & {
      select?: TransmissonCountAggregateInputType | true
    }
  >

  export interface TransmissonDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Transmisson that matches the filter.
     * @param {TransmissonFindUniqueArgs} args - Arguments to find a Transmisson
     * @example
     * // Get one Transmisson
     * const transmisson = await prisma.transmisson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransmissonFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransmissonFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transmisson'> extends True ? CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>> : CheckSelect<T, Prisma__TransmissonClient<Transmisson | null, null>, Prisma__TransmissonClient<TransmissonGetPayload<T> | null, null>>

    /**
     * Find the first Transmisson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissonFindFirstArgs} args - Arguments to find a Transmisson
     * @example
     * // Get one Transmisson
     * const transmisson = await prisma.transmisson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransmissonFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransmissonFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transmisson'> extends True ? CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>> : CheckSelect<T, Prisma__TransmissonClient<Transmisson | null, null>, Prisma__TransmissonClient<TransmissonGetPayload<T> | null, null>>

    /**
     * Find zero or more Transmissons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transmissons
     * const transmissons = await prisma.transmisson.findMany()
     * 
     * // Get first 10 Transmissons
     * const transmissons = await prisma.transmisson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transmissonWithIdOnly = await prisma.transmisson.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransmissonFindManyArgs>(
      args?: SelectSubset<T, TransmissonFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Transmisson>>, PrismaPromise<Array<TransmissonGetPayload<T>>>>

    /**
     * Create a Transmisson.
     * @param {TransmissonCreateArgs} args - Arguments to create a Transmisson.
     * @example
     * // Create one Transmisson
     * const Transmisson = await prisma.transmisson.create({
     *   data: {
     *     // ... data to create a Transmisson
     *   }
     * })
     * 
    **/
    create<T extends TransmissonCreateArgs>(
      args: SelectSubset<T, TransmissonCreateArgs>
    ): CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>>

    /**
     * Create many Transmissons.
     *     @param {TransmissonCreateManyArgs} args - Arguments to create many Transmissons.
     *     @example
     *     // Create many Transmissons
     *     const transmisson = await prisma.transmisson.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransmissonCreateManyArgs>(
      args?: SelectSubset<T, TransmissonCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Transmisson.
     * @param {TransmissonDeleteArgs} args - Arguments to delete one Transmisson.
     * @example
     * // Delete one Transmisson
     * const Transmisson = await prisma.transmisson.delete({
     *   where: {
     *     // ... filter to delete one Transmisson
     *   }
     * })
     * 
    **/
    delete<T extends TransmissonDeleteArgs>(
      args: SelectSubset<T, TransmissonDeleteArgs>
    ): CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>>

    /**
     * Update one Transmisson.
     * @param {TransmissonUpdateArgs} args - Arguments to update one Transmisson.
     * @example
     * // Update one Transmisson
     * const transmisson = await prisma.transmisson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransmissonUpdateArgs>(
      args: SelectSubset<T, TransmissonUpdateArgs>
    ): CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>>

    /**
     * Delete zero or more Transmissons.
     * @param {TransmissonDeleteManyArgs} args - Arguments to filter Transmissons to delete.
     * @example
     * // Delete a few Transmissons
     * const { count } = await prisma.transmisson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransmissonDeleteManyArgs>(
      args?: SelectSubset<T, TransmissonDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transmissons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transmissons
     * const transmisson = await prisma.transmisson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransmissonUpdateManyArgs>(
      args: SelectSubset<T, TransmissonUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transmisson.
     * @param {TransmissonUpsertArgs} args - Arguments to update or create a Transmisson.
     * @example
     * // Update or create a Transmisson
     * const transmisson = await prisma.transmisson.upsert({
     *   create: {
     *     // ... data to create a Transmisson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transmisson we want to update
     *   }
     * })
    **/
    upsert<T extends TransmissonUpsertArgs>(
      args: SelectSubset<T, TransmissonUpsertArgs>
    ): CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>>

    /**
     * Find one Transmisson that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TransmissonFindUniqueOrThrowArgs} args - Arguments to find a Transmisson
     * @example
     * // Get one Transmisson
     * const transmisson = await prisma.transmisson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransmissonFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TransmissonFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>>

    /**
     * Find the first Transmisson that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissonFindFirstOrThrowArgs} args - Arguments to find a Transmisson
     * @example
     * // Get one Transmisson
     * const transmisson = await prisma.transmisson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransmissonFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TransmissonFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TransmissonClient<Transmisson>, Prisma__TransmissonClient<TransmissonGetPayload<T>>>

    /**
     * Count the number of Transmissons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissonCountArgs} args - Arguments to filter Transmissons to count.
     * @example
     * // Count the number of Transmissons
     * const count = await prisma.transmisson.count({
     *   where: {
     *     // ... the filter for the Transmissons we want to count
     *   }
     * })
    **/
    count<T extends TransmissonCountArgs>(
      args?: Subset<T, TransmissonCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransmissonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transmisson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransmissonAggregateArgs>(args: Subset<T, TransmissonAggregateArgs>): PrismaPromise<GetTransmissonAggregateType<T>>

    /**
     * Group by Transmisson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransmissonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransmissonGroupByArgs['orderBy'] }
        : { orderBy?: TransmissonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransmissonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransmissonGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Transmisson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransmissonClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Cars<T extends CarsFindManyArgs = {}>(args?: Subset<T, CarsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Cars>| Null>, PrismaPromise<Array<CarsGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Transmisson base type for findUnique actions
   */
  export type TransmissonFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
    /**
     * Filter, which Transmisson to fetch.
     * 
    **/
    where: TransmissonWhereUniqueInput
  }

  /**
   * Transmisson: findUnique
   */
  export interface TransmissonFindUniqueArgs extends TransmissonFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transmisson base type for findFirst actions
   */
  export type TransmissonFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
    /**
     * Filter, which Transmisson to fetch.
     * 
    **/
    where?: TransmissonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transmissons to fetch.
     * 
    **/
    orderBy?: Enumerable<TransmissonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transmissons.
     * 
    **/
    cursor?: TransmissonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transmissons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transmissons.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transmissons.
     * 
    **/
    distinct?: Enumerable<TransmissonScalarFieldEnum>
  }

  /**
   * Transmisson: findFirst
   */
  export interface TransmissonFindFirstArgs extends TransmissonFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transmisson findMany
   */
  export type TransmissonFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
    /**
     * Filter, which Transmissons to fetch.
     * 
    **/
    where?: TransmissonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transmissons to fetch.
     * 
    **/
    orderBy?: Enumerable<TransmissonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transmissons.
     * 
    **/
    cursor?: TransmissonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transmissons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transmissons.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransmissonScalarFieldEnum>
  }


  /**
   * Transmisson create
   */
  export type TransmissonCreateArgs = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
    /**
     * The data needed to create a Transmisson.
     * 
    **/
    data: XOR<TransmissonCreateInput, TransmissonUncheckedCreateInput>
  }


  /**
   * Transmisson createMany
   */
  export type TransmissonCreateManyArgs = {
    /**
     * The data used to create many Transmissons.
     * 
    **/
    data: Enumerable<TransmissonCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transmisson update
   */
  export type TransmissonUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
    /**
     * The data needed to update a Transmisson.
     * 
    **/
    data: XOR<TransmissonUpdateInput, TransmissonUncheckedUpdateInput>
    /**
     * Choose, which Transmisson to update.
     * 
    **/
    where: TransmissonWhereUniqueInput
  }


  /**
   * Transmisson updateMany
   */
  export type TransmissonUpdateManyArgs = {
    /**
     * The data used to update Transmissons.
     * 
    **/
    data: XOR<TransmissonUpdateManyMutationInput, TransmissonUncheckedUpdateManyInput>
    /**
     * Filter which Transmissons to update
     * 
    **/
    where?: TransmissonWhereInput
  }


  /**
   * Transmisson upsert
   */
  export type TransmissonUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
    /**
     * The filter to search for the Transmisson to update in case it exists.
     * 
    **/
    where: TransmissonWhereUniqueInput
    /**
     * In case the Transmisson found by the `where` argument doesn't exist, create a new Transmisson with this data.
     * 
    **/
    create: XOR<TransmissonCreateInput, TransmissonUncheckedCreateInput>
    /**
     * In case the Transmisson was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TransmissonUpdateInput, TransmissonUncheckedUpdateInput>
  }


  /**
   * Transmisson delete
   */
  export type TransmissonDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
    /**
     * Filter which Transmisson to delete.
     * 
    **/
    where: TransmissonWhereUniqueInput
  }


  /**
   * Transmisson deleteMany
   */
  export type TransmissonDeleteManyArgs = {
    /**
     * Filter which Transmissons to delete
     * 
    **/
    where?: TransmissonWhereInput
  }


  /**
   * Transmisson: findUniqueOrThrow
   */
  export type TransmissonFindUniqueOrThrowArgs = TransmissonFindUniqueArgsBase
      

  /**
   * Transmisson: findFirstOrThrow
   */
  export type TransmissonFindFirstOrThrowArgs = TransmissonFindFirstArgsBase
      

  /**
   * Transmisson without action
   */
  export type TransmissonArgs = {
    /**
     * Select specific fields to fetch from the Transmisson
     * 
    **/
    select?: TransmissonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransmissonInclude | null
  }



  /**
   * Model Brands
   */


  export type AggregateBrands = {
    _count: BrandsCountAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  export type BrandsMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BrandsMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BrandsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BrandsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrandsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrandsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BrandsAggregateArgs = {
    /**
     * Filter which Brands to aggregate.
     * 
    **/
    where?: BrandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     * 
    **/
    orderBy?: Enumerable<BrandsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BrandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandsMaxAggregateInputType
  }

  export type GetBrandsAggregateType<T extends BrandsAggregateArgs> = {
        [P in keyof T & keyof AggregateBrands]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrands[P]>
      : GetScalarType<T[P], AggregateBrands[P]>
  }




  export type BrandsGroupByArgs = {
    where?: BrandsWhereInput
    orderBy?: Enumerable<BrandsOrderByWithAggregationInput>
    by: Array<BrandsScalarFieldEnum>
    having?: BrandsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandsCountAggregateInputType | true
    _min?: BrandsMinAggregateInputType
    _max?: BrandsMaxAggregateInputType
  }


  export type BrandsGroupByOutputType = {
    id: string
    name: string
    _count: BrandsCountAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  type GetBrandsGroupByPayload<T extends BrandsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BrandsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandsGroupByOutputType[P]>
            : GetScalarType<T[P], BrandsGroupByOutputType[P]>
        }
      >
    >


  export type BrandsSelect = {
    id?: boolean
    name?: boolean
    Cars?: boolean | CarsFindManyArgs
    _count?: boolean | BrandsCountOutputTypeArgs
  }

  export type BrandsInclude = {
    Cars?: boolean | CarsFindManyArgs
    _count?: boolean | BrandsCountOutputTypeArgs
  }

  export type BrandsGetPayload<
    S extends boolean | null | undefined | BrandsArgs,
    U = keyof S
      > = S extends true
        ? Brands
    : S extends undefined
    ? never
    : S extends BrandsArgs | BrandsFindManyArgs
    ?'include' extends U
    ? Brands  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Cars' ? Array < CarsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? BrandsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Cars' ? Array < CarsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? BrandsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Brands ? Brands[P] : never
  } 
    : Brands
  : Brands


  type BrandsCountArgs = Merge<
    Omit<BrandsFindManyArgs, 'select' | 'include'> & {
      select?: BrandsCountAggregateInputType | true
    }
  >

  export interface BrandsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Brands that matches the filter.
     * @param {BrandsFindUniqueArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BrandsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BrandsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Brands'> extends True ? CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>> : CheckSelect<T, Prisma__BrandsClient<Brands | null, null>, Prisma__BrandsClient<BrandsGetPayload<T> | null, null>>

    /**
     * Find the first Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsFindFirstArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BrandsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BrandsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Brands'> extends True ? CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>> : CheckSelect<T, Prisma__BrandsClient<Brands | null, null>, Prisma__BrandsClient<BrandsGetPayload<T> | null, null>>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brands.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brands.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandsWithIdOnly = await prisma.brands.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BrandsFindManyArgs>(
      args?: SelectSubset<T, BrandsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Brands>>, PrismaPromise<Array<BrandsGetPayload<T>>>>

    /**
     * Create a Brands.
     * @param {BrandsCreateArgs} args - Arguments to create a Brands.
     * @example
     * // Create one Brands
     * const Brands = await prisma.brands.create({
     *   data: {
     *     // ... data to create a Brands
     *   }
     * })
     * 
    **/
    create<T extends BrandsCreateArgs>(
      args: SelectSubset<T, BrandsCreateArgs>
    ): CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>>

    /**
     * Create many Brands.
     *     @param {BrandsCreateManyArgs} args - Arguments to create many Brands.
     *     @example
     *     // Create many Brands
     *     const brands = await prisma.brands.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BrandsCreateManyArgs>(
      args?: SelectSubset<T, BrandsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Brands.
     * @param {BrandsDeleteArgs} args - Arguments to delete one Brands.
     * @example
     * // Delete one Brands
     * const Brands = await prisma.brands.delete({
     *   where: {
     *     // ... filter to delete one Brands
     *   }
     * })
     * 
    **/
    delete<T extends BrandsDeleteArgs>(
      args: SelectSubset<T, BrandsDeleteArgs>
    ): CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>>

    /**
     * Update one Brands.
     * @param {BrandsUpdateArgs} args - Arguments to update one Brands.
     * @example
     * // Update one Brands
     * const brands = await prisma.brands.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BrandsUpdateArgs>(
      args: SelectSubset<T, BrandsUpdateArgs>
    ): CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>>

    /**
     * Delete zero or more Brands.
     * @param {BrandsDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brands.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BrandsDeleteManyArgs>(
      args?: SelectSubset<T, BrandsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brands = await prisma.brands.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BrandsUpdateManyArgs>(
      args: SelectSubset<T, BrandsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Brands.
     * @param {BrandsUpsertArgs} args - Arguments to update or create a Brands.
     * @example
     * // Update or create a Brands
     * const brands = await prisma.brands.upsert({
     *   create: {
     *     // ... data to create a Brands
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brands we want to update
     *   }
     * })
    **/
    upsert<T extends BrandsUpsertArgs>(
      args: SelectSubset<T, BrandsUpsertArgs>
    ): CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>>

    /**
     * Find one Brands that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BrandsFindUniqueOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BrandsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BrandsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>>

    /**
     * Find the first Brands that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsFindFirstOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BrandsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BrandsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BrandsClient<Brands>, Prisma__BrandsClient<BrandsGetPayload<T>>>

    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brands.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandsCountArgs>(
      args?: Subset<T, BrandsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandsAggregateArgs>(args: Subset<T, BrandsAggregateArgs>): PrismaPromise<GetBrandsAggregateType<T>>

    /**
     * Group by Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandsGroupByArgs['orderBy'] }
        : { orderBy?: BrandsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Brands.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BrandsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Cars<T extends CarsFindManyArgs = {}>(args?: Subset<T, CarsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Cars>| Null>, PrismaPromise<Array<CarsGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Brands base type for findUnique actions
   */
  export type BrandsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
    /**
     * Filter, which Brands to fetch.
     * 
    **/
    where: BrandsWhereUniqueInput
  }

  /**
   * Brands: findUnique
   */
  export interface BrandsFindUniqueArgs extends BrandsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Brands base type for findFirst actions
   */
  export type BrandsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
    /**
     * Filter, which Brands to fetch.
     * 
    **/
    where?: BrandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     * 
    **/
    orderBy?: Enumerable<BrandsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     * 
    **/
    cursor?: BrandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     * 
    **/
    distinct?: Enumerable<BrandsScalarFieldEnum>
  }

  /**
   * Brands: findFirst
   */
  export interface BrandsFindFirstArgs extends BrandsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Brands findMany
   */
  export type BrandsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
    /**
     * Filter, which Brands to fetch.
     * 
    **/
    where?: BrandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     * 
    **/
    orderBy?: Enumerable<BrandsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     * 
    **/
    cursor?: BrandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BrandsScalarFieldEnum>
  }


  /**
   * Brands create
   */
  export type BrandsCreateArgs = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
    /**
     * The data needed to create a Brands.
     * 
    **/
    data: XOR<BrandsCreateInput, BrandsUncheckedCreateInput>
  }


  /**
   * Brands createMany
   */
  export type BrandsCreateManyArgs = {
    /**
     * The data used to create many Brands.
     * 
    **/
    data: Enumerable<BrandsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Brands update
   */
  export type BrandsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
    /**
     * The data needed to update a Brands.
     * 
    **/
    data: XOR<BrandsUpdateInput, BrandsUncheckedUpdateInput>
    /**
     * Choose, which Brands to update.
     * 
    **/
    where: BrandsWhereUniqueInput
  }


  /**
   * Brands updateMany
   */
  export type BrandsUpdateManyArgs = {
    /**
     * The data used to update Brands.
     * 
    **/
    data: XOR<BrandsUpdateManyMutationInput, BrandsUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     * 
    **/
    where?: BrandsWhereInput
  }


  /**
   * Brands upsert
   */
  export type BrandsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
    /**
     * The filter to search for the Brands to update in case it exists.
     * 
    **/
    where: BrandsWhereUniqueInput
    /**
     * In case the Brands found by the `where` argument doesn't exist, create a new Brands with this data.
     * 
    **/
    create: XOR<BrandsCreateInput, BrandsUncheckedCreateInput>
    /**
     * In case the Brands was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BrandsUpdateInput, BrandsUncheckedUpdateInput>
  }


  /**
   * Brands delete
   */
  export type BrandsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
    /**
     * Filter which Brands to delete.
     * 
    **/
    where: BrandsWhereUniqueInput
  }


  /**
   * Brands deleteMany
   */
  export type BrandsDeleteManyArgs = {
    /**
     * Filter which Brands to delete
     * 
    **/
    where?: BrandsWhereInput
  }


  /**
   * Brands: findUniqueOrThrow
   */
  export type BrandsFindUniqueOrThrowArgs = BrandsFindUniqueArgsBase
      

  /**
   * Brands: findFirstOrThrow
   */
  export type BrandsFindFirstOrThrowArgs = BrandsFindFirstArgsBase
      

  /**
   * Brands without action
   */
  export type BrandsArgs = {
    /**
     * Select specific fields to fetch from the Brands
     * 
    **/
    select?: BrandsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BrandsInclude | null
  }



  /**
   * Model Cars
   */


  export type AggregateCars = {
    _count: CarsCountAggregateOutputType | null
    _avg: CarsAvgAggregateOutputType | null
    _sum: CarsSumAggregateOutputType | null
    _min: CarsMinAggregateOutputType | null
    _max: CarsMaxAggregateOutputType | null
  }

  export type CarsAvgAggregateOutputType = {
    creation_year: number | null
    model_year: number | null
  }

  export type CarsSumAggregateOutputType = {
    creation_year: number | null
    model_year: number | null
  }

  export type CarsMinAggregateOutputType = {
    id: string | null
    color: string | null
    model: string | null
    creation_year: number | null
    model_year: number | null
    transmissonId: string | null
    brandsId: string | null
  }

  export type CarsMaxAggregateOutputType = {
    id: string | null
    color: string | null
    model: string | null
    creation_year: number | null
    model_year: number | null
    transmissonId: string | null
    brandsId: string | null
  }

  export type CarsCountAggregateOutputType = {
    id: number
    color: number
    model: number
    creation_year: number
    model_year: number
    transmissonId: number
    brandsId: number
    _all: number
  }


  export type CarsAvgAggregateInputType = {
    creation_year?: true
    model_year?: true
  }

  export type CarsSumAggregateInputType = {
    creation_year?: true
    model_year?: true
  }

  export type CarsMinAggregateInputType = {
    id?: true
    color?: true
    model?: true
    creation_year?: true
    model_year?: true
    transmissonId?: true
    brandsId?: true
  }

  export type CarsMaxAggregateInputType = {
    id?: true
    color?: true
    model?: true
    creation_year?: true
    model_year?: true
    transmissonId?: true
    brandsId?: true
  }

  export type CarsCountAggregateInputType = {
    id?: true
    color?: true
    model?: true
    creation_year?: true
    model_year?: true
    transmissonId?: true
    brandsId?: true
    _all?: true
  }

  export type CarsAggregateArgs = {
    /**
     * Filter which Cars to aggregate.
     * 
    **/
    where?: CarsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     * 
    **/
    orderBy?: Enumerable<CarsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CarsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cars
    **/
    _count?: true | CarsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarsMaxAggregateInputType
  }

  export type GetCarsAggregateType<T extends CarsAggregateArgs> = {
        [P in keyof T & keyof AggregateCars]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCars[P]>
      : GetScalarType<T[P], AggregateCars[P]>
  }




  export type CarsGroupByArgs = {
    where?: CarsWhereInput
    orderBy?: Enumerable<CarsOrderByWithAggregationInput>
    by: Array<CarsScalarFieldEnum>
    having?: CarsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarsCountAggregateInputType | true
    _avg?: CarsAvgAggregateInputType
    _sum?: CarsSumAggregateInputType
    _min?: CarsMinAggregateInputType
    _max?: CarsMaxAggregateInputType
  }


  export type CarsGroupByOutputType = {
    id: string
    color: string
    model: string
    creation_year: number
    model_year: number
    transmissonId: string | null
    brandsId: string | null
    _count: CarsCountAggregateOutputType | null
    _avg: CarsAvgAggregateOutputType | null
    _sum: CarsSumAggregateOutputType | null
    _min: CarsMinAggregateOutputType | null
    _max: CarsMaxAggregateOutputType | null
  }

  type GetCarsGroupByPayload<T extends CarsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CarsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarsGroupByOutputType[P]>
            : GetScalarType<T[P], CarsGroupByOutputType[P]>
        }
      >
    >


  export type CarsSelect = {
    id?: boolean
    color?: boolean
    model?: boolean
    creation_year?: boolean
    model_year?: boolean
    Transmisson?: boolean | TransmissonArgs
    transmissonId?: boolean
    Brands?: boolean | BrandsArgs
    brandsId?: boolean
  }

  export type CarsInclude = {
    Transmisson?: boolean | TransmissonArgs
    Brands?: boolean | BrandsArgs
  }

  export type CarsGetPayload<
    S extends boolean | null | undefined | CarsArgs,
    U = keyof S
      > = S extends true
        ? Cars
    : S extends undefined
    ? never
    : S extends CarsArgs | CarsFindManyArgs
    ?'include' extends U
    ? Cars  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Transmisson' ? TransmissonGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'Brands' ? BrandsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Transmisson' ? TransmissonGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'Brands' ? BrandsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Cars ? Cars[P] : never
  } 
    : Cars
  : Cars


  type CarsCountArgs = Merge<
    Omit<CarsFindManyArgs, 'select' | 'include'> & {
      select?: CarsCountAggregateInputType | true
    }
  >

  export interface CarsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Cars that matches the filter.
     * @param {CarsFindUniqueArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cars'> extends True ? CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>> : CheckSelect<T, Prisma__CarsClient<Cars | null, null>, Prisma__CarsClient<CarsGetPayload<T> | null, null>>

    /**
     * Find the first Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsFindFirstArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cars'> extends True ? CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>> : CheckSelect<T, Prisma__CarsClient<Cars | null, null>, Prisma__CarsClient<CarsGetPayload<T> | null, null>>

    /**
     * Find zero or more Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cars
     * const cars = await prisma.cars.findMany()
     * 
     * // Get first 10 Cars
     * const cars = await prisma.cars.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carsWithIdOnly = await prisma.cars.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarsFindManyArgs>(
      args?: SelectSubset<T, CarsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cars>>, PrismaPromise<Array<CarsGetPayload<T>>>>

    /**
     * Create a Cars.
     * @param {CarsCreateArgs} args - Arguments to create a Cars.
     * @example
     * // Create one Cars
     * const Cars = await prisma.cars.create({
     *   data: {
     *     // ... data to create a Cars
     *   }
     * })
     * 
    **/
    create<T extends CarsCreateArgs>(
      args: SelectSubset<T, CarsCreateArgs>
    ): CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>>

    /**
     * Create many Cars.
     *     @param {CarsCreateManyArgs} args - Arguments to create many Cars.
     *     @example
     *     // Create many Cars
     *     const cars = await prisma.cars.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CarsCreateManyArgs>(
      args?: SelectSubset<T, CarsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cars.
     * @param {CarsDeleteArgs} args - Arguments to delete one Cars.
     * @example
     * // Delete one Cars
     * const Cars = await prisma.cars.delete({
     *   where: {
     *     // ... filter to delete one Cars
     *   }
     * })
     * 
    **/
    delete<T extends CarsDeleteArgs>(
      args: SelectSubset<T, CarsDeleteArgs>
    ): CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>>

    /**
     * Update one Cars.
     * @param {CarsUpdateArgs} args - Arguments to update one Cars.
     * @example
     * // Update one Cars
     * const cars = await prisma.cars.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarsUpdateArgs>(
      args: SelectSubset<T, CarsUpdateArgs>
    ): CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>>

    /**
     * Delete zero or more Cars.
     * @param {CarsDeleteManyArgs} args - Arguments to filter Cars to delete.
     * @example
     * // Delete a few Cars
     * const { count } = await prisma.cars.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarsDeleteManyArgs>(
      args?: SelectSubset<T, CarsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cars
     * const cars = await prisma.cars.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarsUpdateManyArgs>(
      args: SelectSubset<T, CarsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cars.
     * @param {CarsUpsertArgs} args - Arguments to update or create a Cars.
     * @example
     * // Update or create a Cars
     * const cars = await prisma.cars.upsert({
     *   create: {
     *     // ... data to create a Cars
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cars we want to update
     *   }
     * })
    **/
    upsert<T extends CarsUpsertArgs>(
      args: SelectSubset<T, CarsUpsertArgs>
    ): CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>>

    /**
     * Find one Cars that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CarsFindUniqueOrThrowArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CarsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>>

    /**
     * Find the first Cars that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsFindFirstOrThrowArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CarsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CarsClient<Cars>, Prisma__CarsClient<CarsGetPayload<T>>>

    /**
     * Count the number of Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsCountArgs} args - Arguments to filter Cars to count.
     * @example
     * // Count the number of Cars
     * const count = await prisma.cars.count({
     *   where: {
     *     // ... the filter for the Cars we want to count
     *   }
     * })
    **/
    count<T extends CarsCountArgs>(
      args?: Subset<T, CarsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarsAggregateArgs>(args: Subset<T, CarsAggregateArgs>): PrismaPromise<GetCarsAggregateType<T>>

    /**
     * Group by Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarsGroupByArgs['orderBy'] }
        : { orderBy?: CarsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Cars.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Transmisson<T extends TransmissonArgs = {}>(args?: Subset<T, TransmissonArgs>): CheckSelect<T, Prisma__TransmissonClient<Transmisson | Null>, Prisma__TransmissonClient<TransmissonGetPayload<T> | Null>>;

    Brands<T extends BrandsArgs = {}>(args?: Subset<T, BrandsArgs>): CheckSelect<T, Prisma__BrandsClient<Brands | Null>, Prisma__BrandsClient<BrandsGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Cars base type for findUnique actions
   */
  export type CarsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
    /**
     * Filter, which Cars to fetch.
     * 
    **/
    where: CarsWhereUniqueInput
  }

  /**
   * Cars: findUnique
   */
  export interface CarsFindUniqueArgs extends CarsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cars base type for findFirst actions
   */
  export type CarsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
    /**
     * Filter, which Cars to fetch.
     * 
    **/
    where?: CarsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     * 
    **/
    orderBy?: Enumerable<CarsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     * 
    **/
    cursor?: CarsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     * 
    **/
    distinct?: Enumerable<CarsScalarFieldEnum>
  }

  /**
   * Cars: findFirst
   */
  export interface CarsFindFirstArgs extends CarsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cars findMany
   */
  export type CarsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
    /**
     * Filter, which Cars to fetch.
     * 
    **/
    where?: CarsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     * 
    **/
    orderBy?: Enumerable<CarsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cars.
     * 
    **/
    cursor?: CarsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CarsScalarFieldEnum>
  }


  /**
   * Cars create
   */
  export type CarsCreateArgs = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
    /**
     * The data needed to create a Cars.
     * 
    **/
    data: XOR<CarsCreateInput, CarsUncheckedCreateInput>
  }


  /**
   * Cars createMany
   */
  export type CarsCreateManyArgs = {
    /**
     * The data used to create many Cars.
     * 
    **/
    data: Enumerable<CarsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cars update
   */
  export type CarsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
    /**
     * The data needed to update a Cars.
     * 
    **/
    data: XOR<CarsUpdateInput, CarsUncheckedUpdateInput>
    /**
     * Choose, which Cars to update.
     * 
    **/
    where: CarsWhereUniqueInput
  }


  /**
   * Cars updateMany
   */
  export type CarsUpdateManyArgs = {
    /**
     * The data used to update Cars.
     * 
    **/
    data: XOR<CarsUpdateManyMutationInput, CarsUncheckedUpdateManyInput>
    /**
     * Filter which Cars to update
     * 
    **/
    where?: CarsWhereInput
  }


  /**
   * Cars upsert
   */
  export type CarsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
    /**
     * The filter to search for the Cars to update in case it exists.
     * 
    **/
    where: CarsWhereUniqueInput
    /**
     * In case the Cars found by the `where` argument doesn't exist, create a new Cars with this data.
     * 
    **/
    create: XOR<CarsCreateInput, CarsUncheckedCreateInput>
    /**
     * In case the Cars was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CarsUpdateInput, CarsUncheckedUpdateInput>
  }


  /**
   * Cars delete
   */
  export type CarsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
    /**
     * Filter which Cars to delete.
     * 
    **/
    where: CarsWhereUniqueInput
  }


  /**
   * Cars deleteMany
   */
  export type CarsDeleteManyArgs = {
    /**
     * Filter which Cars to delete
     * 
    **/
    where?: CarsWhereInput
  }


  /**
   * Cars: findUniqueOrThrow
   */
  export type CarsFindUniqueOrThrowArgs = CarsFindUniqueArgsBase
      

  /**
   * Cars: findFirstOrThrow
   */
  export type CarsFindFirstOrThrowArgs = CarsFindFirstArgsBase
      

  /**
   * Cars without action
   */
  export type CarsArgs = {
    /**
     * Select specific fields to fetch from the Cars
     * 
    **/
    select?: CarsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CarsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BrandsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BrandsScalarFieldEnum = (typeof BrandsScalarFieldEnum)[keyof typeof BrandsScalarFieldEnum]


  export const CarsScalarFieldEnum: {
    id: 'id',
    color: 'color',
    model: 'model',
    creation_year: 'creation_year',
    model_year: 'model_year',
    transmissonId: 'transmissonId',
    brandsId: 'brandsId'
  };

  export type CarsScalarFieldEnum = (typeof CarsScalarFieldEnum)[keyof typeof CarsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TransmissonScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type TransmissonScalarFieldEnum = (typeof TransmissonScalarFieldEnum)[keyof typeof TransmissonScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type TransmissonWhereInput = {
    AND?: Enumerable<TransmissonWhereInput>
    OR?: Enumerable<TransmissonWhereInput>
    NOT?: Enumerable<TransmissonWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    Cars?: CarsListRelationFilter
  }

  export type TransmissonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Cars?: CarsOrderByRelationAggregateInput
  }

  export type TransmissonWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type TransmissonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: TransmissonCountOrderByAggregateInput
    _max?: TransmissonMaxOrderByAggregateInput
    _min?: TransmissonMinOrderByAggregateInput
  }

  export type TransmissonScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransmissonScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransmissonScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransmissonScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type BrandsWhereInput = {
    AND?: Enumerable<BrandsWhereInput>
    OR?: Enumerable<BrandsWhereInput>
    NOT?: Enumerable<BrandsWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    Cars?: CarsListRelationFilter
  }

  export type BrandsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Cars?: CarsOrderByRelationAggregateInput
  }

  export type BrandsWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type BrandsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: BrandsCountOrderByAggregateInput
    _max?: BrandsMaxOrderByAggregateInput
    _min?: BrandsMinOrderByAggregateInput
  }

  export type BrandsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BrandsScalarWhereWithAggregatesInput>
    OR?: Enumerable<BrandsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BrandsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type CarsWhereInput = {
    AND?: Enumerable<CarsWhereInput>
    OR?: Enumerable<CarsWhereInput>
    NOT?: Enumerable<CarsWhereInput>
    id?: StringFilter | string
    color?: StringFilter | string
    model?: StringFilter | string
    creation_year?: IntFilter | number
    model_year?: IntFilter | number
    Transmisson?: XOR<TransmissonRelationFilter, TransmissonWhereInput> | null
    transmissonId?: StringNullableFilter | string | null
    Brands?: XOR<BrandsRelationFilter, BrandsWhereInput> | null
    brandsId?: StringNullableFilter | string | null
  }

  export type CarsOrderByWithRelationInput = {
    id?: SortOrder
    color?: SortOrder
    model?: SortOrder
    creation_year?: SortOrder
    model_year?: SortOrder
    Transmisson?: TransmissonOrderByWithRelationInput
    transmissonId?: SortOrder
    Brands?: BrandsOrderByWithRelationInput
    brandsId?: SortOrder
  }

  export type CarsWhereUniqueInput = {
    id?: string
  }

  export type CarsOrderByWithAggregationInput = {
    id?: SortOrder
    color?: SortOrder
    model?: SortOrder
    creation_year?: SortOrder
    model_year?: SortOrder
    transmissonId?: SortOrder
    brandsId?: SortOrder
    _count?: CarsCountOrderByAggregateInput
    _avg?: CarsAvgOrderByAggregateInput
    _max?: CarsMaxOrderByAggregateInput
    _min?: CarsMinOrderByAggregateInput
    _sum?: CarsSumOrderByAggregateInput
  }

  export type CarsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
    model?: StringWithAggregatesFilter | string
    creation_year?: IntWithAggregatesFilter | number
    model_year?: IntWithAggregatesFilter | number
    transmissonId?: StringNullableWithAggregatesFilter | string | null
    brandsId?: StringNullableWithAggregatesFilter | string | null
  }

  export type TransmissonCreateInput = {
    id?: string
    name: string
    Cars?: CarsCreateNestedManyWithoutTransmissonInput
  }

  export type TransmissonUncheckedCreateInput = {
    id?: string
    name: string
    Cars?: CarsUncheckedCreateNestedManyWithoutTransmissonInput
  }

  export type TransmissonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Cars?: CarsUpdateManyWithoutTransmissonNestedInput
  }

  export type TransmissonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Cars?: CarsUncheckedUpdateManyWithoutTransmissonNestedInput
  }

  export type TransmissonCreateManyInput = {
    id?: string
    name: string
  }

  export type TransmissonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TransmissonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandsCreateInput = {
    id?: string
    name: string
    Cars?: CarsCreateNestedManyWithoutBrandsInput
  }

  export type BrandsUncheckedCreateInput = {
    id?: string
    name: string
    Cars?: CarsUncheckedCreateNestedManyWithoutBrandsInput
  }

  export type BrandsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Cars?: CarsUpdateManyWithoutBrandsNestedInput
  }

  export type BrandsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Cars?: CarsUncheckedUpdateManyWithoutBrandsNestedInput
  }

  export type BrandsCreateManyInput = {
    id?: string
    name: string
  }

  export type BrandsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CarsCreateInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    Transmisson?: TransmissonCreateNestedOneWithoutCarsInput
    Brands?: BrandsCreateNestedOneWithoutCarsInput
  }

  export type CarsUncheckedCreateInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    transmissonId?: string | null
    brandsId?: string | null
  }

  export type CarsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    Transmisson?: TransmissonUpdateOneWithoutCarsNestedInput
    Brands?: BrandsUpdateOneWithoutCarsNestedInput
  }

  export type CarsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    transmissonId?: NullableStringFieldUpdateOperationsInput | string | null
    brandsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarsCreateManyInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    transmissonId?: string | null
    brandsId?: string | null
  }

  export type CarsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
  }

  export type CarsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    transmissonId?: NullableStringFieldUpdateOperationsInput | string | null
    brandsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type CarsListRelationFilter = {
    every?: CarsWhereInput
    some?: CarsWhereInput
    none?: CarsWhereInput
  }

  export type CarsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransmissonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TransmissonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type TransmissonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BrandsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BrandsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type TransmissonRelationFilter = {
    is?: TransmissonWhereInput | null
    isNot?: TransmissonWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BrandsRelationFilter = {
    is?: BrandsWhereInput | null
    isNot?: BrandsWhereInput | null
  }

  export type CarsCountOrderByAggregateInput = {
    id?: SortOrder
    color?: SortOrder
    model?: SortOrder
    creation_year?: SortOrder
    model_year?: SortOrder
    transmissonId?: SortOrder
    brandsId?: SortOrder
  }

  export type CarsAvgOrderByAggregateInput = {
    creation_year?: SortOrder
    model_year?: SortOrder
  }

  export type CarsMaxOrderByAggregateInput = {
    id?: SortOrder
    color?: SortOrder
    model?: SortOrder
    creation_year?: SortOrder
    model_year?: SortOrder
    transmissonId?: SortOrder
    brandsId?: SortOrder
  }

  export type CarsMinOrderByAggregateInput = {
    id?: SortOrder
    color?: SortOrder
    model?: SortOrder
    creation_year?: SortOrder
    model_year?: SortOrder
    transmissonId?: SortOrder
    brandsId?: SortOrder
  }

  export type CarsSumOrderByAggregateInput = {
    creation_year?: SortOrder
    model_year?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type CarsCreateNestedManyWithoutTransmissonInput = {
    create?: XOR<Enumerable<CarsCreateWithoutTransmissonInput>, Enumerable<CarsUncheckedCreateWithoutTransmissonInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutTransmissonInput>
    createMany?: CarsCreateManyTransmissonInputEnvelope
    connect?: Enumerable<CarsWhereUniqueInput>
  }

  export type CarsUncheckedCreateNestedManyWithoutTransmissonInput = {
    create?: XOR<Enumerable<CarsCreateWithoutTransmissonInput>, Enumerable<CarsUncheckedCreateWithoutTransmissonInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutTransmissonInput>
    createMany?: CarsCreateManyTransmissonInputEnvelope
    connect?: Enumerable<CarsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CarsUpdateManyWithoutTransmissonNestedInput = {
    create?: XOR<Enumerable<CarsCreateWithoutTransmissonInput>, Enumerable<CarsUncheckedCreateWithoutTransmissonInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutTransmissonInput>
    upsert?: Enumerable<CarsUpsertWithWhereUniqueWithoutTransmissonInput>
    createMany?: CarsCreateManyTransmissonInputEnvelope
    set?: Enumerable<CarsWhereUniqueInput>
    disconnect?: Enumerable<CarsWhereUniqueInput>
    delete?: Enumerable<CarsWhereUniqueInput>
    connect?: Enumerable<CarsWhereUniqueInput>
    update?: Enumerable<CarsUpdateWithWhereUniqueWithoutTransmissonInput>
    updateMany?: Enumerable<CarsUpdateManyWithWhereWithoutTransmissonInput>
    deleteMany?: Enumerable<CarsScalarWhereInput>
  }

  export type CarsUncheckedUpdateManyWithoutTransmissonNestedInput = {
    create?: XOR<Enumerable<CarsCreateWithoutTransmissonInput>, Enumerable<CarsUncheckedCreateWithoutTransmissonInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutTransmissonInput>
    upsert?: Enumerable<CarsUpsertWithWhereUniqueWithoutTransmissonInput>
    createMany?: CarsCreateManyTransmissonInputEnvelope
    set?: Enumerable<CarsWhereUniqueInput>
    disconnect?: Enumerable<CarsWhereUniqueInput>
    delete?: Enumerable<CarsWhereUniqueInput>
    connect?: Enumerable<CarsWhereUniqueInput>
    update?: Enumerable<CarsUpdateWithWhereUniqueWithoutTransmissonInput>
    updateMany?: Enumerable<CarsUpdateManyWithWhereWithoutTransmissonInput>
    deleteMany?: Enumerable<CarsScalarWhereInput>
  }

  export type CarsCreateNestedManyWithoutBrandsInput = {
    create?: XOR<Enumerable<CarsCreateWithoutBrandsInput>, Enumerable<CarsUncheckedCreateWithoutBrandsInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutBrandsInput>
    createMany?: CarsCreateManyBrandsInputEnvelope
    connect?: Enumerable<CarsWhereUniqueInput>
  }

  export type CarsUncheckedCreateNestedManyWithoutBrandsInput = {
    create?: XOR<Enumerable<CarsCreateWithoutBrandsInput>, Enumerable<CarsUncheckedCreateWithoutBrandsInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutBrandsInput>
    createMany?: CarsCreateManyBrandsInputEnvelope
    connect?: Enumerable<CarsWhereUniqueInput>
  }

  export type CarsUpdateManyWithoutBrandsNestedInput = {
    create?: XOR<Enumerable<CarsCreateWithoutBrandsInput>, Enumerable<CarsUncheckedCreateWithoutBrandsInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutBrandsInput>
    upsert?: Enumerable<CarsUpsertWithWhereUniqueWithoutBrandsInput>
    createMany?: CarsCreateManyBrandsInputEnvelope
    set?: Enumerable<CarsWhereUniqueInput>
    disconnect?: Enumerable<CarsWhereUniqueInput>
    delete?: Enumerable<CarsWhereUniqueInput>
    connect?: Enumerable<CarsWhereUniqueInput>
    update?: Enumerable<CarsUpdateWithWhereUniqueWithoutBrandsInput>
    updateMany?: Enumerable<CarsUpdateManyWithWhereWithoutBrandsInput>
    deleteMany?: Enumerable<CarsScalarWhereInput>
  }

  export type CarsUncheckedUpdateManyWithoutBrandsNestedInput = {
    create?: XOR<Enumerable<CarsCreateWithoutBrandsInput>, Enumerable<CarsUncheckedCreateWithoutBrandsInput>>
    connectOrCreate?: Enumerable<CarsCreateOrConnectWithoutBrandsInput>
    upsert?: Enumerable<CarsUpsertWithWhereUniqueWithoutBrandsInput>
    createMany?: CarsCreateManyBrandsInputEnvelope
    set?: Enumerable<CarsWhereUniqueInput>
    disconnect?: Enumerable<CarsWhereUniqueInput>
    delete?: Enumerable<CarsWhereUniqueInput>
    connect?: Enumerable<CarsWhereUniqueInput>
    update?: Enumerable<CarsUpdateWithWhereUniqueWithoutBrandsInput>
    updateMany?: Enumerable<CarsUpdateManyWithWhereWithoutBrandsInput>
    deleteMany?: Enumerable<CarsScalarWhereInput>
  }

  export type TransmissonCreateNestedOneWithoutCarsInput = {
    create?: XOR<TransmissonCreateWithoutCarsInput, TransmissonUncheckedCreateWithoutCarsInput>
    connectOrCreate?: TransmissonCreateOrConnectWithoutCarsInput
    connect?: TransmissonWhereUniqueInput
  }

  export type BrandsCreateNestedOneWithoutCarsInput = {
    create?: XOR<BrandsCreateWithoutCarsInput, BrandsUncheckedCreateWithoutCarsInput>
    connectOrCreate?: BrandsCreateOrConnectWithoutCarsInput
    connect?: BrandsWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransmissonUpdateOneWithoutCarsNestedInput = {
    create?: XOR<TransmissonCreateWithoutCarsInput, TransmissonUncheckedCreateWithoutCarsInput>
    connectOrCreate?: TransmissonCreateOrConnectWithoutCarsInput
    upsert?: TransmissonUpsertWithoutCarsInput
    disconnect?: boolean
    delete?: boolean
    connect?: TransmissonWhereUniqueInput
    update?: XOR<TransmissonUpdateWithoutCarsInput, TransmissonUncheckedUpdateWithoutCarsInput>
  }

  export type BrandsUpdateOneWithoutCarsNestedInput = {
    create?: XOR<BrandsCreateWithoutCarsInput, BrandsUncheckedCreateWithoutCarsInput>
    connectOrCreate?: BrandsCreateOrConnectWithoutCarsInput
    upsert?: BrandsUpsertWithoutCarsInput
    disconnect?: boolean
    delete?: boolean
    connect?: BrandsWhereUniqueInput
    update?: XOR<BrandsUpdateWithoutCarsInput, BrandsUncheckedUpdateWithoutCarsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CarsCreateWithoutTransmissonInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    Brands?: BrandsCreateNestedOneWithoutCarsInput
  }

  export type CarsUncheckedCreateWithoutTransmissonInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    brandsId?: string | null
  }

  export type CarsCreateOrConnectWithoutTransmissonInput = {
    where: CarsWhereUniqueInput
    create: XOR<CarsCreateWithoutTransmissonInput, CarsUncheckedCreateWithoutTransmissonInput>
  }

  export type CarsCreateManyTransmissonInputEnvelope = {
    data: Enumerable<CarsCreateManyTransmissonInput>
    skipDuplicates?: boolean
  }

  export type CarsUpsertWithWhereUniqueWithoutTransmissonInput = {
    where: CarsWhereUniqueInput
    update: XOR<CarsUpdateWithoutTransmissonInput, CarsUncheckedUpdateWithoutTransmissonInput>
    create: XOR<CarsCreateWithoutTransmissonInput, CarsUncheckedCreateWithoutTransmissonInput>
  }

  export type CarsUpdateWithWhereUniqueWithoutTransmissonInput = {
    where: CarsWhereUniqueInput
    data: XOR<CarsUpdateWithoutTransmissonInput, CarsUncheckedUpdateWithoutTransmissonInput>
  }

  export type CarsUpdateManyWithWhereWithoutTransmissonInput = {
    where: CarsScalarWhereInput
    data: XOR<CarsUpdateManyMutationInput, CarsUncheckedUpdateManyWithoutCarsInput>
  }

  export type CarsScalarWhereInput = {
    AND?: Enumerable<CarsScalarWhereInput>
    OR?: Enumerable<CarsScalarWhereInput>
    NOT?: Enumerable<CarsScalarWhereInput>
    id?: StringFilter | string
    color?: StringFilter | string
    model?: StringFilter | string
    creation_year?: IntFilter | number
    model_year?: IntFilter | number
    transmissonId?: StringNullableFilter | string | null
    brandsId?: StringNullableFilter | string | null
  }

  export type CarsCreateWithoutBrandsInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    Transmisson?: TransmissonCreateNestedOneWithoutCarsInput
  }

  export type CarsUncheckedCreateWithoutBrandsInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    transmissonId?: string | null
  }

  export type CarsCreateOrConnectWithoutBrandsInput = {
    where: CarsWhereUniqueInput
    create: XOR<CarsCreateWithoutBrandsInput, CarsUncheckedCreateWithoutBrandsInput>
  }

  export type CarsCreateManyBrandsInputEnvelope = {
    data: Enumerable<CarsCreateManyBrandsInput>
    skipDuplicates?: boolean
  }

  export type CarsUpsertWithWhereUniqueWithoutBrandsInput = {
    where: CarsWhereUniqueInput
    update: XOR<CarsUpdateWithoutBrandsInput, CarsUncheckedUpdateWithoutBrandsInput>
    create: XOR<CarsCreateWithoutBrandsInput, CarsUncheckedCreateWithoutBrandsInput>
  }

  export type CarsUpdateWithWhereUniqueWithoutBrandsInput = {
    where: CarsWhereUniqueInput
    data: XOR<CarsUpdateWithoutBrandsInput, CarsUncheckedUpdateWithoutBrandsInput>
  }

  export type CarsUpdateManyWithWhereWithoutBrandsInput = {
    where: CarsScalarWhereInput
    data: XOR<CarsUpdateManyMutationInput, CarsUncheckedUpdateManyWithoutCarsInput>
  }

  export type TransmissonCreateWithoutCarsInput = {
    id?: string
    name: string
  }

  export type TransmissonUncheckedCreateWithoutCarsInput = {
    id?: string
    name: string
  }

  export type TransmissonCreateOrConnectWithoutCarsInput = {
    where: TransmissonWhereUniqueInput
    create: XOR<TransmissonCreateWithoutCarsInput, TransmissonUncheckedCreateWithoutCarsInput>
  }

  export type BrandsCreateWithoutCarsInput = {
    id?: string
    name: string
  }

  export type BrandsUncheckedCreateWithoutCarsInput = {
    id?: string
    name: string
  }

  export type BrandsCreateOrConnectWithoutCarsInput = {
    where: BrandsWhereUniqueInput
    create: XOR<BrandsCreateWithoutCarsInput, BrandsUncheckedCreateWithoutCarsInput>
  }

  export type TransmissonUpsertWithoutCarsInput = {
    update: XOR<TransmissonUpdateWithoutCarsInput, TransmissonUncheckedUpdateWithoutCarsInput>
    create: XOR<TransmissonCreateWithoutCarsInput, TransmissonUncheckedCreateWithoutCarsInput>
  }

  export type TransmissonUpdateWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TransmissonUncheckedUpdateWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandsUpsertWithoutCarsInput = {
    update: XOR<BrandsUpdateWithoutCarsInput, BrandsUncheckedUpdateWithoutCarsInput>
    create: XOR<BrandsCreateWithoutCarsInput, BrandsUncheckedCreateWithoutCarsInput>
  }

  export type BrandsUpdateWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BrandsUncheckedUpdateWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CarsCreateManyTransmissonInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    brandsId?: string | null
  }

  export type CarsUpdateWithoutTransmissonInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    Brands?: BrandsUpdateOneWithoutCarsNestedInput
  }

  export type CarsUncheckedUpdateWithoutTransmissonInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    brandsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarsUncheckedUpdateManyWithoutCarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    brandsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarsCreateManyBrandsInput = {
    id?: string
    color: string
    model: string
    creation_year: number
    model_year: number
    transmissonId?: string | null
  }

  export type CarsUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    Transmisson?: TransmissonUpdateOneWithoutCarsNestedInput
  }

  export type CarsUncheckedUpdateWithoutBrandsInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    creation_year?: IntFieldUpdateOperationsInput | number
    model_year?: IntFieldUpdateOperationsInput | number
    transmissonId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}